package com.mapbar.gis.io.sdo;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * 
 * @author dux(duxionggis@126.com)
 * 
 */
public class DBFactory {

	private static Connection conn;

	public static Connection getConn(String driver, String url, String user,
			String pwd) throws Exception {
		if (conn == null || conn.isClosed()) {
			Class.forName(driver);
			conn = DriverManager.getConnection(url, user, pwd);
			return conn;
		} else {
			return conn;
		}
	}

	public static Connection createConn(String driver, String url, String user,
			String pwd) throws Exception {
		Class.forName(driver);
		return DriverManager.getConnection(url, user, pwd);
	}

	public static void closeConn() {
		try {
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException e) {
		}
	}

	public static boolean checkTab(Connection conn, String tab) {
		String sql = "SELECT COUNT(1) FROM user_tables WHERE upper(table_name)='"
				+ tab.toUpperCase() + "'";
		ResultSet rs = null;
		Statement state = null;
		try {
			state = conn.createStatement();
			rs = state.executeQuery(sql);
			rs.next();
			if (rs.getInt(1) > 0) {
				rs.close();
				state.close();
				return true;
			}
		} catch (SQLException e) {
			try {
				if (rs != null)
					rs.close();
				if (state != null){
					state.close();
				}
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
		return false;
	}

	public static String toQuerySql(String table, String whereClause,
			String[] columns) {
		StringBuffer sb = new StringBuffer();
		sb.append("select ");
		if (columns == null || columns.length == 0) {
			sb.append("*");
		} else {
			for (String col : columns) {
				if (col != null && !col.isEmpty()) {
					sb.append(col).append(",");
				}
			}
			if (sb.lastIndexOf(",") == sb.length() - 1) {
				sb.delete(sb.length() - 1, sb.length());
			}
		}

		if (table == null || table.isEmpty()) {
			sb.append(" from dual");
		} else {
			sb.append(" from ").append(table);
		}

		if (whereClause != null && !whereClause.isEmpty()) {
			sb.append(" where ").append(whereClause);
		}

		return sb.toString();
	}

}
