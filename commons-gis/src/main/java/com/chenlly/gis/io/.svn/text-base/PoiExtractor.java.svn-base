package com.mapbar.gis.io;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import com.mapbar.gis.geo.Feature;
import com.mapbar.gis.geo.FeatureCollection;
import com.mapbar.gis.geo.Pos;
import com.mapbar.gis.io.mif.MifReader;
import com.mapbar.gis.io.mif.MifWriter;
import com.mapbar.tools.util.FileUtil;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.index.kdtree.KdNode;
import com.vividsolutions.jts.index.kdtree.KdTree;

/**
 * 
 * @author dux(duxionggis@126.com)
 * 
 */
public class PoiExtractor {
	
    

	@SuppressWarnings("unchecked")
	public static void main(String[] args) throws Exception {
		if (args == null || args.length < 2 || args.length <3) {
			System.out.println("PoiExtractor [input ] [kind] [dis meter]");
			System.out.println("eg: PoiExtractor D:/data/input D:/data/output 4101|F008,4101 1000");
			return;
		}
		String kName = "KIND";
		String kParkToilet = "4102";
		
		String input = "E:\\poi";
		String output = "E:\\poi\\out";
		int dis = 1000;
		try {
			input = args[0].trim();
			output = args[1].trim();
			kParkToilet = args[2].trim().toUpperCase();
			dis = Integer.valueOf(args[3].trim());
		} catch (Exception ex) {
			System.out.println("[dis meter] default 500");
			return;
		}

		double degToMeter = Math.PI * 6378137 / 180.0;//6378137赤道半径，对应一度对应赤道上的一米
		int buf = (int) (dis * 1.0e7 / degToMeter);//1公里对应多少度
		List<File> flist = new ArrayList<File>();
		if(input.toUpperCase().endsWith(".MIF")){
			flist.add(new File(input));
		} else {
			FileUtil.getEndFiles(input, ".MIF", flist);
		}
		
		for(int k = 0 ; k<flist.size();k++){
			String fileName = flist.get(k).getAbsolutePath();
			System.out.println("--处理文件"+fileName);
			String tempS = fileName.substring(0,fileName.lastIndexOf(File.separator));
			String cityName  = fileName.substring(tempS.lastIndexOf(File.separator)+1,fileName.lastIndexOf(File.separator));
			MifReader mr = new MifReader(fileName);
			FeatureCollection fc = mr.read();
			List<Pos> spector = new LinkedList<Pos>();
			FeatureCollection fcdel = new FeatureCollection(fc.getSchema());
			List<Feature> aFeat = new ArrayList<Feature>();
			List<Feature> allid = new ArrayList<Feature>();
			// build spatial index
			Envelope full = null;
			KdTree tree = new KdTree();
			for (Iterator<Feature> i = fc.iterator(); i.hasNext();) {
				Feature f = i.next();
				allid.add(f);
				if (full == null)
					full = f.getGeometry().getEnvelopeInternal();
				else
					full.expandToInclude(f.getGeometry().getEnvelopeInternal());
				tree.insert(f.getGeometry().getCoordinate(), f);
			}
			
			// filter
			int size = 10;
			double divx = full.getWidth() / size;
			double divy = full.getHeight() / size;
			for (int ii = 0; ii < size; ii++) {
				for (int jj = 0; jj < size; jj++) {
					double minx = full.getMinX() + ii * divx;
					double maxx = full.getMinX() + (ii + 1) * divx;
					double miny = full.getMinY() + jj * divy;
					double maxy = full.getMinY() + (jj + 1) * divy;

					Envelope env = new Envelope(minx, maxx, miny, maxy);
					List<KdNode> list = (List<KdNode>) tree.query(env);
					if (list.size() == 0)
						continue;

					for (int kk = 0; kk < list.size(); kk++) {
						Feature f = (Feature) list.get(kk).getData();
						if (kParkToilet.indexOf(f.getString(kName).toUpperCase()) >= 0) {
							int x = (int) (f.getGeometry().getCoordinate().x * 1e7);
							int y = (int) (f.getGeometry().getCoordinate().y * 1e7);
							Pos cur = new Pos(x, y);
							cur.setBuffer(buf);
							if (spector.contains(cur)) {
								fcdel.add(f);
							} else {
								spector.add(cur);
								aFeat.add(f);
							}
						}
					}
				}
				System.out.println("delete line:" + ii);
			}
			spector.clear();
			
			for (int m=0; m<allid.size();m++) {
				Feature f =  allid.get(m);
				if (kParkToilet.indexOf(f.getString(kName).toUpperCase()) >= 0) {
					fc.remove(f);
				}
			}
			for(Feature feature:aFeat) {
				fc.add(feature);
			}
			
			// save file
			String path = output+File.separator+cityName+File.separator+flist.get(k).getName();
			MifWriter mw = new MifWriter(path, false);
			mw.write(fc);
			
			path = path.substring(0, path.lastIndexOf('.')) + "_del.mif";
			mw = new MifWriter(path, false);
			mw.write(fcdel);
		}
	}
}
